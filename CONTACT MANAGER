import javax.swing.*;
import javax.swing.DefaultListModel;
import java.awt.*;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

class Contact implements Serializable {
    String name, phone, email;

    public Contact(String name, String phone, String email) {
        this.name = name;
        this.phone = phone;
        this.email = email;
    }

    @Override
    public String toString() {
        return name + " - " + phone + " - " + email;
    }
}

public class ContactManagementGUI {
    private static final String FILE_NAME = "contacts.txt";
    private static List<Contact> contacts = new ArrayList<>();
    private static DefaultListModel<String> listModel = new DefaultListModel<>();

    public static void main(String[] args) {
        loadContacts();
        SwingUtilities.invokeLater(ContactManagementGUI::createAndShowGUI);
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Contact Management System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        
        JList<String> contactList = new JList<>(listModel);
        JScrollPane scrollPane = new JScrollPane(contactList);

        updateListModel();

        JButton addButton = new JButton("Add Contact");
        JButton editButton = new JButton("Edit Contact");
        JButton deleteButton = new JButton("Delete Contact");
        JButton exitButton = new JButton("Exit");

        addButton.addActionListener(e -> addContact());
        editButton.addActionListener(e -> editContact(contactList.getSelectedIndex()));
        deleteButton.addActionListener(e -> deleteContact(contactList.getSelectedIndex()));
        exitButton.addActionListener(e -> {
            saveContacts();
            System.exit(0);
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);
        buttonPanel.add(exitButton);

        frame.add(scrollPane, BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.SOUTH);
        frame.setVisible(true);
    }

    private static void addContact() {
        JTextField nameField = new JTextField();
        JTextField phoneField = new JTextField();
        JTextField emailField = new JTextField();

        Object[] message = {
            "Name:", nameField,
            "Phone:", phoneField,
            "Email:", emailField
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Add Contact", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            contacts.add(new Contact(nameField.getText(), phoneField.getText(), emailField.getText()));
            updateListModel();
            saveContacts();
        }
    }

    private static void editContact(int index) {
        if (index == -1) {
            JOptionPane.showMessageDialog(null, "Please select a contact to edit.");
            return;
        }

        Contact contact = contacts.get(index);
        JTextField nameField = new JTextField(contact.name);
        JTextField phoneField = new JTextField(contact.phone);
        JTextField emailField = new JTextField(contact.email);

        Object[] message = {
            "Name:", nameField,
            "Phone:", phoneField,
            "Email:", emailField
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Edit Contact", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            contact.name = nameField.getText();
            contact.phone = phoneField.getText();
            contact.email = emailField.getText();
            updateListModel();
            saveContacts();
        }
    }

    private static void deleteContact(int index) {
        if (index == -1) {
            JOptionPane.showMessageDialog(null, "Please select a contact to delete.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this contact?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            contacts.remove(index);
            updateListModel();
            saveContacts();
        }
    }

    private static void updateListModel() {
        listModel.clear();
        for (Contact contact : contacts) {
            listModel.addElement(contact.toString());
        }
    }

    private static void saveContacts() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            oos.writeObject(contacts);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error saving contacts: " + e.getMessage());
        }
    }

    private static void loadContacts() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            contacts = (List<Contact>) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("No previous contacts found or failed to load.");
        }
    }
}
